// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "mygram-api/domain"

	mock "github.com/stretchr/testify/mock"
)

// CommentUseCase is an autogenerated mock type for the CommentUseCase type
type CommentUseCase struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: _a0, _a1
func (_m *CommentUseCase) AddComment(_a0 context.Context, _a1 *domain.Comment) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: ctx, id
func (_m *CommentUseCase) DeleteComment(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetComments provides a mock function with given fields: ctx
func (_m *CommentUseCase) GetComments(ctx context.Context) ([]domain.Comment, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Comment
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Comment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, comment
func (_m *CommentUseCase) UpdateComment(ctx context.Context, comment *domain.Comment) error {
	ret := _m.Called(ctx, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCommentUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentUseCase creates a new instance of CommentUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentUseCase(t mockConstructorTestingTNewCommentUseCase) *CommentUseCase {
	mock := &CommentUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
