// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "mygram-api/domain"

	mock "github.com/stretchr/testify/mock"
)

// SocialMediaRepository is an autogenerated mock type for the SocialMediaRepository type
type SocialMediaRepository struct {
	mock.Mock
}

// AddSocialMedia provides a mock function with given fields: ctx, socialMedia
func (_m *SocialMediaRepository) AddSocialMedia(ctx context.Context, socialMedia *domain.SocialMedia) error {
	ret := _m.Called(ctx, socialMedia)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SocialMedia) error); ok {
		r0 = rf(ctx, socialMedia)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSocialMedia provides a mock function with given fields: ctx, id
func (_m *SocialMediaRepository) DeleteSocialMedia(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSocialMedias provides a mock function with given fields: ctx
func (_m *SocialMediaRepository) GetSocialMedias(ctx context.Context) ([]domain.SocialMedia, error) {
	ret := _m.Called(ctx)

	var r0 []domain.SocialMedia
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SocialMedia); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SocialMedia)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSocialMedia provides a mock function with given fields: ctx, socialMedia
func (_m *SocialMediaRepository) UpdateSocialMedia(ctx context.Context, socialMedia *domain.SocialMedia) error {
	ret := _m.Called(ctx, socialMedia)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SocialMedia) error); ok {
		r0 = rf(ctx, socialMedia)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSocialMediaRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSocialMediaRepository creates a new instance of SocialMediaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSocialMediaRepository(t mockConstructorTestingTNewSocialMediaRepository) *SocialMediaRepository {
	mock := &SocialMediaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
